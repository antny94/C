//Anthony Pham
//9/15/2019

//This program is meant to be bound to a command via "cc -o [commandName] [programFile] and/or executed in a linux shell. This C program was written in vi, a text editor."
//The purpose of this program is to take in one input file, read all characters and increment by one, then display the counter. If the parameter is -s, then it displays the character count after the program is done reading the file. If the parameter is -f, then it writes the character count to a new file.

//Including <stdio.h> for functions such as FILE, getc, printf, and fprintf.
#include <stdio.h>
//Including <string.h> for function strcmp().
#include <string.h>
#define BLANK ' ' //defining a parameter to omit when counting characters
#define NEWLINE '\n' //defining a paramter to omit when counting characters

int main(int argc, char *argv[]) 
{
  //This program is structure so that argv[2] will always be an input file
  //and argv[3] will always be an output file.
  
  FILE *infile = fopen(argv[2], "r"); //r means read
  FILE *outfile = fopen(argv[3], "w"); //w means write
  char c;
  int char_count = 0;

  if ((argc == 3) && (strcmp(argv[1], "-s") == 0)) //check for argc amount and the option comparison using strcmp()
  {
    while ( (c = getc(infile)) != EOF) //read characters until end of file
    {
      if ( (c != BLANK) && (c != NEWLINE) )
      {
        char_count++;
      }
    }

    printf("%d characters\n", char_count);
  }

  if ((argc == 4) && (strcmp(argv[1], "-f") == 0))
  {
    while ( (c = getc(infile)) != EOF)
    {
      if ( (c!= BLANK) && (c != NEWLINE) )
      {
        char_count++;
      }
    }
    fprintf(outfile, "my file has %d chars\n", char_count);
  }
  return 0;
}
